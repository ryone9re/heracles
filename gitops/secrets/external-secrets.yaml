apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: cloudflare-api-token
  namespace: external-dns
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: vault-cluster-backend
    kind: ClusterSecretStore
  target:
    name: cloudflare-api-token
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        api-token: "{{ .token }}"
  data:
    - secretKey: token
      remoteRef:
        key: cloudflare/external-dns
        property: api-token
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: postgres-credentials
  namespace: postgres-operator
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: vault-cluster-backend
    kind: ClusterSecretStore
  target:
    name: postgres-credentials
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        username: "{{ .username }}"
        password: "{{ .password }}"
  data:
    - secretKey: username
      remoteRef:
        key: postgres/main
        property: username
    - secretKey: password
      remoteRef:
        key: postgres/main
        property: password
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: redis-credentials
  namespace: redis-operator
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: vault-cluster-backend
    kind: ClusterSecretStore
  target:
    name: redis-credentials
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        password: "{{ .password }}"
  data:
    - secretKey: password
      remoteRef:
        key: redis/main
        property: password
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: minio-credentials
  namespace: minio-operator
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: vault-cluster-backend
    kind: ClusterSecretStore
  target:
    name: minio-credentials
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        accesskey: "{{ .accesskey }}"
        secretkey: "{{ .secretkey }}"
  data:
    - secretKey: accesskey
      remoteRef:
        key: minio/main
        property: accesskey
    - secretKey: secretkey
      remoteRef:
        key: minio/main
        property: secretkey
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: harbor-credentials
  namespace: harbor
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: vault-cluster-backend
    kind: ClusterSecretStore
  target:
    name: harbor-credentials
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        password: "{{ .password }}"
        secret: "{{ .secret }}"
  data:
    - secretKey: password
      remoteRef:
        key: harbor/main
        property: admin-password
    - secretKey: secret
      remoteRef:
        key: harbor/main
        property: secret-key
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: backup-credentials
  namespace: postgres-operator
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: vault-cluster-backend
    kind: ClusterSecretStore
  target:
    name: backup-creds
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        ACCESS_KEY_ID: "{{ .access_key_id }}"
        SECRET_ACCESS_KEY: "{{ .secret_access_key }}"
  data:
    - secretKey: access_key_id
      remoteRef:
        key: s3/backup
        property: access-key-id
    - secretKey: secret_access_key
      remoteRef:
        key: s3/backup
        property: secret-access-key
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: argocd-admin-password
  namespace: argocd
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: vault-cluster-backend
    kind: ClusterSecretStore
  target:
    name: argocd-secret
    creationPolicy: Merge
    template:
      type: Opaque
      data:
        admin.password: "{{ .password | bcrypt }}"
        admin.passwordMtime: "{{ now | date \"2006-01-02T15:04:05Z\" }}"
  data:
    - secretKey: password
      remoteRef:
        key: argocd/admin
        property: password